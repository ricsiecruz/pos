{
  "version": 3,
  "sources": ["node_modules/bootstrap/scss/mixins/_breakpoints.scss", "src/app/admin/dashboard/dashboard.component.scss"],
  "sourcesContent": ["// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n", "@import 'bootstrap/scss/_functions';\n@import 'bootstrap/scss/_variables';\n@import 'bootstrap/scss/mixins/_breakpoints';\n\n.dashboard {\n    @include media-breakpoint-down(sm) {\n        padding: 20px;\n    }\n    &_cards {\n        display: flex;\n        justify-content: space-between;\n        @include media-breakpoint-down(sm) {\n            display: block;\n        }\n        &_income, &_expenses, &_cups {\n            font-weight: 700;\n            font-size: 18px;\n            color: #ffffff;\n            height: 98px;\n            width: 380px;\n            border-radius: 6px;\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            align-items: center;\n            -webkit-box-align: center;\n            -ms-flex-align: center;\n            justify-content: space-between;\n            -webkit-justify-content: space-between;\n            -ms-flex-pack: space-between;\n            margin: 0 0 25px;\n            padding: 20px;\n            @include media-breakpoint-down(sm) {\n                width: 100%;\n            }\n            &_header {\n                font-size: 14px;\n                font-weight: normal;\n            }\n            &_icon {\n                background-color: #d2d2d2;\n                width: 48px;\n                height: 48px;\n                display: -webkit-box;\n                display: -ms-flexbox;\n                display: flex;\n                align-items: center;\n                -webkit-box-align: center;\n                -ms-flex-align: center;\n                justify-content: center;\n                -webkit-justify-content: center;\n                -ms-flex-pack: center;\n                border-radius: 50px;\n                svg {\n                    width: 34px;\n                }\n            }\n        }\n        &_income {\n            background: #1B2850;\n            &_icon {\n                svg {\n                    fill: #1b2850;\n                }\n            }\n        }\n        &_expenses {\n            background-color: #FF4D4D;\n            &_icon {\n                svg {\n                    fill: #FF4D4D;\n                }\n            }\n        }\n        &_cups {\n            background-color: #28C76F;\n            &_icon {\n                svg {\n                    fill: #28C76F;\n                }\n            }\n        }\n    }\n}"],
  "mappings": ";AA4EI,OAAA,CAAA,SAAA,EAAA;ACxEJ,GAAA;AAEQ,aAAA;;;AAEJ,CAAA;AACI,WAAA;AACA,mBAAA;;ADkEJ,OAAA,CAAA,SAAA,EAAA;ACpEA,GAAA;AAIQ,aAAA;;;AAEJ,CAAA;AAAA,CAAA;AAAA,CAAA;AACI,eAAA;AACA,aAAA;AACA,SAAA;AACA,UAAA;AACA,SAAA;AACA,iBAAA;AACA,WAAA;AACA,WAAA;AACA,WAAA;AACA,eAAA;AACA,qBAAA;AACA,kBAAA;AACA,mBAAA;AACA,2BAAA;AACA,iBAAA;AACA,UAAA,EAAA,EAAA;AACA,WAAA;;AD6CR,OAAA,CAAA,SAAA,EAAA;AC9DI,GAAA;EAAA,CAAA;EAAA,CAAA;AAmBQ,WAAA;;;AAEJ,CAAA;AAAA,CAAA;AAAA,CAAA;AACI,aAAA;AACA,eAAA;;AAEJ,CAAA;AAAA,CAAA;AAAA,CAAA;AACI,oBAAA;AACA,SAAA;AACA,UAAA;AACA,WAAA;AACA,WAAA;AACA,WAAA;AACA,eAAA;AACA,qBAAA;AACA,kBAAA;AACA,mBAAA;AACA,2BAAA;AACA,iBAAA;AACA,iBAAA;;AACA,CAdJ,4BAcI;AAAA,CAdJ,8BAcI;AAAA,CAdJ,0BAcI;AACI,SAAA;;AAIZ,CA5CA;AA6CI,cAAA;;AAEI,CAtBJ,4BAsBI;AACI,QAAA;;AAIZ,CApDA;AAqDI,oBAAA;;AAEI,CA9BJ,8BA8BI;AACI,QAAA;;AAIZ,CA5DA;AA6DI,oBAAA;;AAEI,CAtCJ,0BAsCI;AACI,QAAA;;",
  "names": []
}
